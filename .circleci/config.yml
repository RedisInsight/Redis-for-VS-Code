# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

aliases:
  ui-deps-cache-key: &uiDepsCacheKey
    key: ui-deps-{{ checksum "yarn.lock" }}

orbs:
  node: circleci/node@5.2.0

executors:
  linux-executor:
    machine:
      image: ubuntu-2004:2023.04.2
  linux-executor-dlc:
    machine:
      image: ubuntu-2004:2023.04.2
      docker_layer_caching: true
    environment:
      DISPLAY: ":99"
  docker-node:
    docker:
      - image: cimg/node:18.15.0
  docker:
    docker:
      - image: cibuilds/docker:19.03.5
  macos:
    macos:
      xcode: 14.2.0

jobs:
  unit-tests-ui:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          <<: *uiDepsCacheKey
      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: Unit tests UI
          command: |
            yarn test:cov
      - save_cache:
          <<: *uiDepsCacheKey
          paths:
            - ~/.cache/yarn

  linux:
    executor: docker-node
    resource_class: large
    parameters:
      env:
        description: Build environment (stage || prod)
        type: enum
        default: stage
        enum: ['stage', 'prod', 'dev']
    steps:
      - checkout
      - restore_cache:
          <<: *uiDepsCacheKey
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: Build .vsix package
          command: |
            yarn download:backend

            if [ << parameters.env >> == 'prod' ]; then
              yarn package:prod
              exit 0;
            fi

            yarn package:stage
      - persist_to_workspace:
          root: .
          paths:
            - redis-insight-vsc*.vsix
      - save_cache:
          <<: *uiDepsCacheKey
          paths:
            - ~/.cache/yarn

  e2e-app-image:
    executor: linux-executor-dlc
    parameters:
      report:
        description: Send report for test run to slack
        type: boolean
        default: false
      parallelism:
        description: Number of threads to run tests
        type: integer
        default: 1
    parallelism: << parameters.parallelism >>
    steps:
      - checkout
      - node/install:
          node-version: '18.15.0'
      - attach_workspace:
          at: .
      - run: sudo apt-get install net-tools
      - run:
          name: Start Xvfb
          command: |
            sudo apt-get install -y xvfb
            Xvfb :99 -screen 0 1920x1080x24 &
      - run:
          name: Run e2e tests
          command: |
            cd tests/e2e && export TEST_FILES=$(circleci tests glob "tests/**/*.e2e.ts" | circleci tests split --split-by=timings) && cd ../..
            .circleci/e2e/test.app.sh
      - when:
          condition:
            equal: [ true, << parameters.report >> ]
          steps:
            - run:
                name: Send report
                when: always
                command: |
                  APP_BUILD_TYPE="VSCode (Linux)" node ./.circleci/e2e-results.js
                  # curl -H "Content-type: application/json" --data @e2e.report.json -H "Authorization: Bearer $SLACK_TEST_REPORT_KEY" -X POST https://slack.com/api/chat.postMessage
      - store_test_results:
          path: tests/e2e/results
      - store_artifacts:
          path: tests/e2e/mochawesome-report
          destination: tests/e2e/mochawesome-report
      - store_artifacts:
          path: /tmp/test-resources/screenshots
          destination: test-resources/screenshots

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  frontend-tests:
    jobs:
      - unit-tests-ui:
          filters:
            branches:
              only:
                - /^feature.*/

  e2e-tests:
    jobs:
      # - approve:
      #     name: Start E2E Tests
      #     type: approval
      #     filters:
      #       branches:
      #         only:
      #           - /^e2e/feature.*/
      #           - /^e2e/bugfix.*/

      - linux:
          name: Build extension - Linux (stage)
          env: stage
          filters:
            branches:
              only:
                - /^e2e/feature.*/
                - /^e2e/bugfix.*/

      - e2e-app-image:
          name: E2ETest (linux)
          parallelism: 1
          requires:
            - Build extension - Linux (stage)
